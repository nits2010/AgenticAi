Metadata-Version: 2.4
Name: agentic-weather-agent
Version: 1.0.0
Summary: A pure agentic AI weather agent using real LLM reasoning
Project-URL: Homepage, https://github.com/your-username/agentic-weather-agent
Project-URL: Repository, https://github.com/your-username/agentic-weather-agent
Project-URL: Issues, https://github.com/your-username/agentic-weather-agent/issues
Author: Weather Agent Team
License-Expression: MIT
Keywords: agent,ai,langgraph,llm,weather
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.11
Requires-Dist: groq>=0.4.0
Requires-Dist: langgraph>=0.2.0
Requires-Dist: openai>=1.0.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: serpapi>=0.1.0
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == 'dev'
Requires-Dist: isort>=5.12.0; extra == 'dev'
Requires-Dist: mypy>=1.0.0; extra == 'dev'
Requires-Dist: pytest-cov>=4.0.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Description-Content-Type: text/markdown

# üß† Real Agentic Weather Agent

A **pure agentic AI** that uses real LLM reasoning for dynamic planning and execution. No fallbacks, no simulations - only genuine AI intelligence with transparent reasoning.

## üöÄ Quick Start

### Install Dependencies

#### Option 1: Using uv (Recommended)
```bash
# Install uv if you don't have it
curl -LsSf https://astral.sh/uv/install.sh | sh

# Create virtual environment and install dependencies
uv venv
source .venv/bin/activate  # Windows: .\.venv\Scripts\Activate.ps1
uv pip install -e .
```

#### Option 2: Using pip (Fallback)
```bash
python -m venv .venv && source .venv/bin/activate  # Windows: .\.venv\Scripts\Activate.ps1
pip install -r requirements.txt
```

### Environment Setup (REQUIRED)
Create `.env` file - **NO API KEY = NO AGENT**:
```bash
# REQUIRED: Choose ONE LLM provider
GROQ_API_KEY=your-groq-api-key          # Recommended: Fast & Free
# OR
OPENAI_API_KEY=your-openai-api-key      # Alternative: OpenAI

# Optional: For Google search capabilities
SERPAPI_API_KEY=your-serpapi-key
```

**‚ö†Ô∏è CRITICAL: This is a PURE agentic AI**
- **No API key = Agent fails** (no fallbacks, no fake reasoning)
- **Only real LLM reasoning** - no hardcoded rules or simulations
- **True intelligence** - adapts to any query dynamically

**Get API Keys:**
1. **Groq (Recommended)**: Visit [Groq Console](https://console.groq.com/keys) - Fast & Free
2. **OpenAI**: Visit [OpenAI Platform](https://platform.openai.com/api-keys)
3. Add your chosen API key to `.env` file
4. **This agent ONLY works with real LLM reasoning!**

### Run Examples
```bash
# Auto-detect best LLM provider (Groq preferred)
python weather_agent.py --query "Weather in Mumbai for 3 days"

# Use specific LLM provider
python weather_agent.py --query "Weather in Mumbai" --provider groq
python weather_agent.py --query "Weather in Mumbai" --provider openai

# Demo with multiple query types
python weather_agent.py

# Alert query with feedback
python weather_agent.py --query "Any storm alerts for Bengaluru?" --feedback "Be concise"

# Coordinate-based query
python weather_agent.py --query "12.97,77.59 for 2 days in fahrenheit"

# Run tests
python weather_agent.py --test
```

## üìÅ Project Structure
```
weather_agent.py      # Main entry point
agent.py             # Core agent logic
llm_provider.py      # LLM operations
tools.py             # All tools (weather, search, RAG)
config.py            # Configuration management
tool_base.py         # Base tool class
llm_prompts.py       # All LLM prompts
```

## üìö Documentation

For detailed information about this project, architecture, and capabilities, see:

**[üìñ PROJECT.md](./PROJECT.md)** - Complete project documentation including:
- Agentic AI capabilities and reasoning process
- Architecture and component details
- Learning system and RAG implementation
- LLM abstraction and provider support
- Advanced usage examples

## üõ†Ô∏è Requirements

- Python 3.11+
- uv package manager
- LLM API key (Groq or OpenAI)
- Internet connection for weather data

## üìÑ License

MIT License - see LICENSE file for details.